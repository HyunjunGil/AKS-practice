helm upgrade --install hyunjun-kafka oci://registry-1.docker.io/bitnamicharts/kafka \
  --namespace hyunjun \
  --set controller.replicaCount=3 \
  --set controller.resources.requests.cpu=50m \
  --set controller.resources.requests.memory=128Mi \
  --set controller.resources.limits.cpu=150m \
  --set controller.resources.limits.memory=256Mi
Pulled: registry-1.docker.io/bitnamicharts/kafka:32.4.3
Digest: sha256:12b98a1b358a6bc10c498817c801bd49e4a9d4c965af8acbe5a70764ec836997
Release "hyunjun-kafka" has been upgraded. Happy Helming!
NAME: hyunjun-kafka
LAST DEPLOYED: Wed Aug 27 23:25:33 2025
NAMESPACE: hyunjun
STATUS: deployed
REVISION: 2
TEST SUITE: None
NOTES:
CHART NAME: kafka
CHART VERSION: 32.4.3
APP VERSION: 4.0.0

âš  WARNING: Since August 28th, 2025, only a limited subset of images/charts are available for free.
    Subscribe to Bitnami Secure Images to receive continued support and security updates.
    More info at https://bitnami.com and https://github.com/bitnami/containers/issues/83267

** Please be patient while the chart is being deployed **

Kafka can be accessed by consumers via port 9092 on the following DNS name from within your cluster:

    hyunjun-kafka.hyunjun.svc.cluster.local

Each Kafka broker can be accessed by producers via port 9092 on the following DNS name(s) from within your cluster:

    hyunjun-kafka-controller-0.hyunjun-kafka-controller-headless.hyunjun.svc.cluster.local:9092
    hyunjun-kafka-controller-1.hyunjun-kafka-controller-headless.hyunjun.svc.cluster.local:9092
    hyunjun-kafka-controller-2.hyunjun-kafka-controller-headless.hyunjun.svc.cluster.local:9092

The CLIENT listener for Kafka client connections from within your cluster have been configured with the following security settings:
    - SASL authentication

To connect a client to your Kafka, you need to create the 'client.properties' configuration files with the content below:

security.protocol=SASL_PLAINTEXT
sasl.mechanism=SCRAM-SHA-256
sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required \
    username="user1" \
    password="$(kubectl get secret hyunjun-kafka-user-passwords --namespace hyunjun -o jsonpath='{.data.client-passwords}' | base64 -d | cut -d , -f 1)";

To create a pod that you can use as a Kafka client run the following commands:

    kubectl run hyunjun-kafka-client --restart='Never' --image docker.io/bitnami/kafka:4.0.0-debian-12-r10 --namespace hyunjun --command -- sleep infinity
    kubectl cp --namespace hyunjun /path/to/client.properties hyunjun-kafka-client:/tmp/client.properties
    kubectl exec --tty -i hyunjun-kafka-client --namespace hyunjun -- bash

    PRODUCER:
        kafka-console-producer.sh \
            --producer.config /tmp/client.properties \
            --bootstrap-server hyunjun-kafka.hyunjun.svc.cluster.local:9092 \
            --topic test

    CONSUMER:
        kafka-console-consumer.sh \
            --consumer.config /tmp/client.properties \
            --bootstrap-server hyunjun-kafka.hyunjun.svc.cluster.local:9092 \
            --topic test \
            --from-beginning

WARNING: There are "resources" sections in the chart not set. Using "resourcesPreset" is not recommended for production. For production installations, please set the following values according to your workload needs:
  - defaultInitContainers.prepareConfig.resources
+info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/